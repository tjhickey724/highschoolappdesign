/*
  app.js -- This creates an Express webserver
*/

// First we load in all of the packages we need for the server...
const createError = require('http-errors');
const express = require('express');
const path = require('path');
const cookieParser = require('cookie-parser');
const session = require("express-session");
const bodyParser = require("body-parser");
const flash = require('connect-flash');

// Now we create the server
const app = express();

// Here we specify that we will be using EJS as our view engine
app.set('views', path.join(__dirname, 'views'));
app.set('view engine', 'ejs');

// Here we process the requests so they are easy to handle
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

// Here we specify that static files will be in the public folder
app.use(express.static(path.join(__dirname, 'public')));

// Here we enable session handling ..
app.use(session(
  { secret: 'zzbbyanana789sdfa',
    resave: false,
    saveUninitialized: false }));
app.use(flash());
app.use(bodyParser.urlencoded({ extended: false }));

// This is an example of middleware
// where we look at a request and process it!
app.use(function(req,res,next){
  console.log("about to look for routes!!!")
  //console.dir(req.headers)
  next()
});

// here we start handling routes
app.get('/', (req, res, next) => {
  res.render('index',{title:"YellowCartwheel"});
});

app.get('/demo', (req,res) => {
  res.render('demo')
})

// here we catch 404 errors and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// this processes any errors generated by the previous routes
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get('env') === 'development' ? err : {};
  // render the error page
  res.status(err.status || 500);
  res.render('error');
});

//Here we set the port to use
const port='5500'
app.set('port', port);

// and now we startup the server listening on that port
const http = require('http');
const server = http.createServer(app);

server.listen(port);

function handleError(e){ console.log("Error starting the server")}
server.on('error', handleError)

function handleListening() { console.log("Server started on port "+port)}
server.on('listening', handleListening)

module.exports = app;
