/*
  app.js -- This creates an Express webserver
*/

// First we load in all of the packages we need for the server...
const createError = require("http-errors");
const express = require("express");
const path = require("path");
const cookieParser = require("cookie-parser");
const session = require("express-session");
const bodyParser = require("body-parser");
const debug = require("debug")("personalapp:server");
const flash = require('connect-flash');
const crypto = require('crypto')
const hash = crypto.createHash('sha256');


const mongoose = require( 'mongoose' );
const mongodb_URI = process.env.MONGODB_URI // was 'mongodb://localhost/hsad'
mongoose.connect( mongodb_URI, { useNewUrlParser: true } );
const db = mongoose.connection;
db.on('error', console.error.bind(console, 'connection error:'));
db.once('open', function() {console.log("we are connected!!!")});

const User = require('./models/User')

// Now we create the server
const app = express();

// Here we specify that we will be using EJS as our view engine
app.set("views", path.join(__dirname, "views"));
app.set("view engine", "ejs");

// Here we process the requests so they are easy to handle
app.use(express.json());
app.use(express.urlencoded({ extended: false }));
app.use(cookieParser());

// Here we specify that static files will be in the public folder
app.use(express.static(path.join(__dirname, "public")));

// Here we enable session handling ..
app.use(
  session({
    secret: "zzbbyanana789sdfa",
    resave: false,
    saveUninitialized: false
  })
);

app.use(bodyParser.urlencoded({ extended: false }));
app.use(flash())
// This is an example of middleware
// where we look at a request and process it!
app.use(function(req, res, next) {
  //console.log("about to look for routes!!! "+new Date())
  console.log(`${req.method} ${req.url}`);
  //console.dir(req.headers)
  next();
});


app.use((req,res,next) => {
  if (req.session.username) {
    res.locals.loggedIn = true
    res.locals.username = req.session.username
    res.locals.user = req.session.user
  } else {
    res.locals.loggedIn = false
    res.locals.username = null
    res.locals.user = null
  }
  console.log("res.locals = "+JSON.stringify(res.locals))
  next()
})


app.get("/login", (req,res) => {
  res.render("login")
})

app.post('/login',
  async (req,res,next) => {
    try {
      const {username,passphrase} = req.body
      const hash = crypto.createHash('sha256');
      hash.update(passphrase);
      const encrypted = hash.digest('hex')
      console.log(`hash.digest=${encrypted}`)
      const user = await User.findOne({username:username,passphrase:encrypted})
      console.log(`user = ${user}`)

      if (user) {
        req.session.username = username //req.body
        req.session.user = user
        req.flash("successfully logged in")
        console.log(`logged in as ${req.session.username}`)
        console.log(`username=${username} and passphrase=${passphrase}`)
        res.redirect('/')
      } else {
        req.session.username = null
        req.session.user = user
        req.flash("incorrect username or password")
        res.redirect('/login')
      }
    }catch(e){
      next(e)
    }
  })

app.post('/signup',
  async (req,res,next) =>{
    try {
      const {username,passphrase,passphrase2} = req.body
      if (passphrase != passphrase2){
        req.flash("passphrases don't match, try again!")
        res.redirect('/login')
      }else if (passphrase.split(' ').length < 5) {
        req.flash("passphrase is too short, try again!")
        res.redirect('/login')
      }else {
        console.log(`signing up ${username} with passphrase "${passphrase}"`)
        const hash = crypto.createHash('sha256');
        hash.update(passphrase);
        const encrypted = hash.digest('hex')
        console.log(`hash.digest=${encrypted}`)
        console.log(`hash.digest=${encrypted}`)
        const user = new User({username:username,passphrase:encrypted})
        await user.save()
        console.log('saved info in User')
        req.session.username = user.username
        req.session.user = user
        res.redirect('/')
      }
    }catch(e){
      next(e)
    }
  })

app.get('/logout', (req,res) => {
  req.session.destroy() //(error)=>{console.log("Error in destroying session: "+error)});
  res.redirect('/');
})




// here we start handling routes
app.get("/", (req, res, next) => {
  res.render("index", { title: "YellowCartwheel" });
});

app.get("/demo", (req, res) => {
  res.render("demo");
});

// Don't change anything below here ...

// here we catch 404 errors and forward to error handler
app.use(function(req, res, next) {
  next(createError(404));
});

// this processes any errors generated by the previous routes
app.use(function(err, req, res, next) {
  // set locals, only providing error in development
  res.locals.message = err.message;
  res.locals.error = req.app.get("env") === "development" ? err : {};
  // render the error page
  res.status(err.status || 500);
  res.render("error");
});

//Here we set the port to use
const port = "5000";
app.set("port", port);

// and now we startup the server listening on that port
const http = require("http");
const server = http.createServer(app);

server.listen(port);

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

server.on("error", onError);

server.on("listening", onListening);

module.exports = app;
